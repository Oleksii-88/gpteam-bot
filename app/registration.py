"""–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
from enum import Enum
from typing import Dict, Optional
from dataclasses import dataclass
from datetime import datetime

class RegistrationStatus(Enum):
    """–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    PENDING = "pending"  # –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
    APPROVED = "approved"  # –û–¥–æ–±—Ä–µ–Ω–∞
    REJECTED = "rejected"  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∞

@dataclass
class RegistrationRequest:
    """–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    user_id: int
    username: str
    first_name: str
    request_time: datetime
    status: RegistrationStatus
    processed_by: Optional[int] = None
    processed_time: Optional[datetime] = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ë–î)
# user_id -> RegistrationRequest
_registration_requests: Dict[int, RegistrationRequest] = {
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    229165573: RegistrationRequest(
        user_id=229165573,
        username="Oleksii",
        first_name="Oleksii üá∫üá¶",
        request_time=datetime.now(),
        status=RegistrationStatus.APPROVED,
        processed_by=229165573,
        processed_time=datetime.now()
    )
}

def create_registration_request(user_id: int, username: str, first_name: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –∏ –≤ –∫–∞–∫–æ–º –æ–Ω–∞ —Å—Ç–∞—Ç—É—Å–µ
    if user_id in _registration_requests:
        request = _registration_requests[user_id]
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING –∏–ª–∏ APPROVED, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–¥–∞—á—É
        if request.status in [RegistrationStatus.PENDING, RegistrationStatus.APPROVED]:
            return False
    
    _registration_requests[user_id] = RegistrationRequest(
        user_id=user_id,
        username=username,
        first_name=first_name,
        request_time=datetime.now(),
        status=RegistrationStatus.PENDING
    )
    return True

def get_registration_status(user_id: int) -> Optional[RegistrationStatus]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    request = _registration_requests.get(user_id)
    return request.status if request else None

def is_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    status = get_registration_status(user_id)
    return status == RegistrationStatus.APPROVED

def approve_registration(user_id: int, admin_id: int) -> bool:
    """–û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    request = _registration_requests.get(user_id)
    if not request or request.status != RegistrationStatus.PENDING:
        return False
    
    request.status = RegistrationStatus.APPROVED
    request.processed_by = admin_id
    request.processed_time = datetime.now()
    return True

def reject_registration(user_id: int, admin_id: int) -> bool:
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    request = _registration_requests.get(user_id)
    if not request or request.status != RegistrationStatus.PENDING:
        return False
    
    request.status = RegistrationStatus.REJECTED
    request.processed_by = admin_id
    request.processed_time = datetime.now()
    return True

def get_pending_requests() -> Dict[int, RegistrationRequest]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    return {
        user_id: request 
        for user_id, request in _registration_requests.items() 
        if request.status == RegistrationStatus.PENDING
    }

def clear_requests() -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö)."""
    _registration_requests.clear()
